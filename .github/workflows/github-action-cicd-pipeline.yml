name: Docker Publish Image And Deploy To Cloud

on:
  push:
    branches: [ "master" ]
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  IMAGE_NAME: nft-backend-api



jobs:
  build:
    name: Build And Publish Docker Images 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Log Into Registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0
        id: buildx
 
      - name: Cache Docker Image Layers
        uses: actions/cache@v3.0.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Build And Push Docker Image
        uses: docker/build-push-action@v3
        id: docker_build
        with:       
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:v${{ github.run_number }}, ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
                    
      - name: Verify
        run: echo ${{ steps.docker_build.outputs.digest }}
  
  deploy-staging:
    name: Deploy To Staging Environment
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Approve For Staging Deployment
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Anhgrew

      - name: Deploy To Staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          script: |
            hostname
            docker rm -f backend-api && docker run --name backend-api  --restart=always -v /tmp/static:/app/static/ -v /tmp/CrawlData:/app/temp/Crawler/ -p 80:9090 -d ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:v${{ github.run_number }}
            docker image prune -fa

  deploy-production:
    name: Deploy To Production Environment
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Approve For Production Deployment
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Anhgrew

      - name: Checkout Github
        uses: actions/checkout@v2

      - name: Deploy To Production Environment
        uses: kitconcept/docker-stack-deploy@v1.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_private_key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          stack_file: "docker-compose.yml"
          stack_name:  ${{ secrets.PRODUCTION_CLUSTER }}

      - name: Validate Updation
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          script: |
            hostname
            docker service update --force nft-verifier_nft-model-api
            docker stack services ${{ secrets.PRODUCTION_CLUSTER }}